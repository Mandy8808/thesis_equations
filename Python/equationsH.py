# Hordeski equations
# we taked the next notation
# Variables;
# NN[r] -> N; gg[r] -> g; Phi[r] -> a; Phi'[r] -> b; pres[r] -> p; Epsilon -> 0;
# den[r] -> rho; m=Mpl=1


def ODE_eqP(r, U, c):
    """
    N, g, a, b, p -> N, g, phi, phi', p
    """
    w, c4, L3, L, k, p0 = c[0], c[1], c[2], c[3], c[4], c[5]
    N, g, a, b, p = U
    if (p > p0/1e04):  # 0
        rho = (p/k)**(1/L)+p/(L-1)
    else:
        rho = 0
        p = 0

    dN = (N*(6*b**2*c4*N**2+g**2*(N**2*(-L3**3+b**2*(-2*c4+L3**3*r**2)) +
          2*a*c4*(a+4*b*r)*w**2) + g**4*(L3**3*N**2*(1 - a**2*r**2 + p*r**2) +
          a**2*(-2*c4 + L3**3*r**2)*w**2)))/(2.*r*(-6*b**2*c4*N**2 +
          g**2*(L3**3*N**2 + 2*a**2*c4*w**2)))
    dg = (g**11*(L3**3*N**2 + 2*a**2*c4*w**2)**2*(L3**3*N**2*(-1 + a**2*r**2 + r**2*rho) + a**2*(-2*c4 + L3**3*r**2)*w**2)*
        (L3**3*N**2*(-2*a**2*c4 + L3**3 + 2*c4*p)*r**2 + 4*a**2*c4*(-2*c4 + L3**3*r**2)*w**2) +
        24*b**4*c4**3*g**3*N**4*(b**2*N**4*(31*L3**6*r**2 + 24*a*b*c4*L3**3*r**3 - 2*b**2*(-2*c4 + L3**3*r**2)**2 +
        2*c4*L3**3*(22 - 21*a**2*r**2 + 27*p*r**2 + 6*r**2*rho)) +
        4*c4*N**2*(-16*b**2*L3**3*r**2 - 2*a*b*r*(9*L3**3 + 5*b**2*(2*c4 - L3**3*r**2)) + a**2*(-7*L3**3 + b**2*(6*c4 + 37*L3**3*r**2)))*
        w**2 + 8*a**2*c4**2*(a**2 + 14*a*b*r + 16*b**2*r**2)*w**4) -
        4*b**2*c4**2*g**5*N**2*(b**2*L3**3*N**6*(27*L3**6*r**2 + 120*a*b*c4*L3**3*r**3 +
        2*c4*L3**3*(34 - 45*a**2*r**2 + 57*p*r**2 + 12*r**2*rho) -
        b**2*(2*c4 - L3**3*r**2)*(-5*L3**3*r**2 + c4*(-20 + 30*a**2*r**2 - 6*p*r**2 + 24*r**2*rho))) -
        2*c4*L3**3*N**4*(30*a**4*b**2*c4*r**2 + 16*b**2*L3**3*r**2 - 168*a**3*b**3*c4*r**3 +
        4*a*b*r*(-7*L3**3 + b**2*(-5*L3**3*r**2 + 2*c4*(11 + 12*p*r**2 + 6*r**2*rho))) +
        a**2*(2*L3**3 - b**2*(151*L3**3*r**2 + 2*c4*(-8 + 33*p*r**2 + 18*r**2*rho))))*w**2 +
        8*a**2*c4**2*N**2*(16*b**2*L3**3*r**2 + 6*a*b*r*(10*L3**3 + 7*b**2*(2*c4 - L3**3*r**2)) +
        a**2*(6*L3**3 + b**2*(22*c4 + 45*L3**3*r**2)))*w**4 - 16*a**4*c4**3*(a**2 - 14*a*b*r + 8*b**2*r**2)*w**6) +
        2*c4*g**7*(b**2*L3**6*N**8*(-(L3**6*r**2) + 56*a*b*c4*L3**3*r**3 + 2*c4*L3**3*(6 - 5*a**2*r**2 + 7*p*r**2 + 2*r**2*rho) +
        2*b**2*(-2*L3**6*r**4 + c4*L3**3*r**2*(-15 + 23*a**2*r**2 - 10*p*r**2 + 13*r**2*rho) +
        c4**2*(44 + 26*p*r**2 + 6*a**4*r**4 + a**2*(-58*r**2 - 6*r**4*(p - rho)) - 32*r**2*rho - 6*p*r**4*rho))) -
        2*a*c4*L3**3*N**6*(-80*a**2*b**3*c4*L3**3*r**3 + 6*a**3*b**2*c4*r**2*(2*L3**3 + 5*b**2*(2*c4 - L3**3*r**2)) -
        a*(2*L3**6 + 4*b**2*L3**3*(3*L3**3*r**2 + c4*(5 + 3*p*r**2)) +
        5*b**4*(2*c4 - L3**3*r**2)*(L3**3*r**2 + 2*c4*(2 + p*r**2 - 2*r**2*rho))) +
        4*b*L3**3*r*(-3*L3**3 + b**2*(3*L3**3*r**2 + 2*c4*(-7 + 4*p*r**2 + 8*r**2*rho))))*w**2 +
        4*a**3*c4**2*N**4*(6*a*L3**6 + 36*b*L3**6*r - 34*a**3*b**2*c4*L3**3*r**2 - 40*a**2*b**3*c4*L3**3*r**3 +
        4*a*b**4*(-2*c4 + L3**3*r**2)**2 + 8*b**3*L3**3*r*(-9*L3**3*r**2 + c4*(30 + 4*p*r**2 - 8*r**2*rho)) +
        a*b**2*L3**3*(15*L3**3*r**2 + c4*(68 + 30*p*r**2 - 4*r**2*rho)))*w**4 -
        16*a**5*c4**3*N**2*(-3*a*L3**3 - 18*b*L3**3*r + a*b**2*(2*c4 - 9*L3**3*r**2) + 14*b**3*r*(-2*c4 + L3**3*r**2))*w**6 +
        32*a**7*c4**4*(a + 6*b*r)*w**8) + g**9*(L3**9*N**8*
        (L3**3*(-2*a**2*c4 + L3**3 + 2*c4*p)*r**2 - 8*a*b*c4*L3**3*r**3 +
        b**2*(L3**6*r**4 - 2*c4*L3**3*r**2*(-7 + 9*a**2*r**2 - 3*p*r**2 + 6*r**2*rho) +
        4*c4**2*(-6 + 2*a**4*r**4 + a**2*(5*r**2 - 2*r**4*(p - rho)) + 4*r**2*rho - p*(r**2 + 2*r**4*rho)))) +
        2*a*c4*L3**6*N**6*(-8*a**2*b*c4*L3**3*r**3 + 24*a**5*b**2*c4**2*r**4 + 4*b*L3**3*r*(L3**3*r**2 + c4*(-6 + 4*r**2*rho)) -
        2*a**3*c4*r**2*(L3**3 + 2*b**2*(9*L3**3*r**2 + 2*c4*(-3 + 5*p*r**2 - r**2*rho))) +
        a*(5*L3**6*r**2 + c4*L3**3*(-8 + 6*p*r**2 + 4*r**2*rho) +
        4*b**2*c4*(L3**3*r**2*(9 + 2*p*r**2 - 7*r**2*rho) + 2*c4*(-6 + 3*p*r**2 + 2*p**2*r**4 + 6*r**2*rho - p*r**4*rho))))*w**2 +
        4*a**3*c4**2*L3**3*N**4*(8*a**2*b*c4*L3**3*r**3 + 2*a**3*c4*r**2*(L3**3 + 17*b**2*(2*c4 - L3**3*r**2)) +
        4*b*L3**3*r*(5*L3**3*r**2 + 2*c4*(-9 + 4*r**2*rho)) +
        a*(11*L3**6*r**2 + c4*L3**3*(-24 + 6*p*r**2 + 8*r**2*rho) -
        b**2*(2*c4 - L3**3*r**2)*(-5*L3**3*r**2 + 2*c4*(22 + 9*p*r**2 - 8*r**2*rho))))*w**4 +
        8*a**5*c4**3*L3**3*N**2*(2*a**3*c4*r**2 + 11*a*L3**3*r**2 + 8*a**2*b*c4*r**3 + 28*b*L3**3*r**3 + 8*b*c4*r*(-9 + 2*r**2*rho) +
        2*a*c4*(-12 + p*r**2 + 2*r**2*rho))*w**6 - 64*a**7*c4**4*(a + 3*b*r)*(2*c4 - L3**3*r**2)*w**8) +
        288*b**6*c4**4*g*N**6*(6*a**2*c4*w**2 + 28*a*b*c4*r*w**2 + b**2*(-(N**2*(6*c4 + 5*L3**3*r**2)) + 16*c4*r**2*w**2)))/(2.*r*(-6*b**2*c4*N**2
        + g**2*(L3**3*N**2 + 2*a**2*c4*w**2))*(-48*b**4*c4**3*N**4*(b**2*N**2*(-2*c4 + L3**3*r**2) + 10*a**2*c4*w**2 - 4*a*b*c4*r*w**2) +
        g**6*(L3**3*N**2 + 2*a**2*c4*w**2)**2*(L3**3*N**2*(-2*a**2*c4 + L3**3 + 2*c4*p)*r**2 + 4*a**2*c4*(-2*c4 + L3**3*r**2)*w**2) +
        12*b**2*c4**2*g**2*N**2*(b**2*L3**3*N**4*(3*L3**3*r**2 + 2*c4*(-4 + a**2*r**2 - p*r**2)) +
        4*a*c4*N**2*(2*a*L3**3 - 4*b*L3**3*r + a*b**2*(-2*c4 + L3**3*r**2))*w**2 + 16*a**3*c4**2*(a - 2*b*r)*w**4) +
        8*c4*g**4*(L3**3*N**2 + 2*a**2*c4*w**2)*(b**2*L3**3*N**4*(-(L3**3*r**2) + c4*(3 - a**2*r**2 + p*r**2)) +
        a*c4*N**2*(6*b*L3**3*r + a*(L3**3 + b**2*(2*c4 - L3**3*r**2)))*w**2 + 2*a**3*c4**2*(a + 6*b*r)*w**4)))
    db = (4*b*c4*g**4*(b**2*L3**3*N**6*(30*a*b*c4*L3**3*r**3 -
        b**2*(2*c4 - L3**3*r**2)*(L3**3*r**2 + c4*(-8 + 6*a**2*r**2 - 3*p*r**2 + 3*r**2*rho)) +
        2*L3**3*(5*L3**3*r**2 + c4*(4 - 10*a**2*r**2 + 13*p*r**2 + 3*r**2*rho))) -
        2*c4*L3**3*N**4*(20*a**4*b**2*c4*r**2 + 4*b**2*L3**3*r**2 - 48*a**3*b**3*c4*r**3 -
        2*a**2*(L3**3 + b**2*(23*L3**3*r**2 + c4*(-4 + 7*p*r**2 - 3*r**2*rho))) +
        a*b*r*(2*L3**3 + b**2*(L3**3*r**2 + 2*c4*(8 + 12*p*r**2 + 3*r**2*rho))))*w**2 +
        16*a**2*c4**2*N**2*(2*b**2*L3**3*r**2 + 3*a*b*r*(L3**3 + b**2*(4*c4 - 2*L3**3*r**2)) + a**2*(2*L3**3 + b**2*(4*c4 + 5*L3**3*r**2)))*
        w**4 + 16*a**4*c4**3*(a**2 - a*b*r - 2*b**2*r**2)*w**6) -
        2*b*g**6*(L3**6*N**6*(14*a*b*c4*L3**3*r**3 + L3**3*r**2*(-2*a**2*c4 + L3**3 + 3*c4*p + c4*rho) -
        2*b**2*c4*(2*c4 - L3**3*r**2)*(-4 + 4*a**2*r**2 - 3*p*r**2 + r**2*rho)) -
        4*a*c4*L3**3*N**4*(-16*a**2*b*c4*L3**3*r**3 + 2*a**3*c4*r**2*(2*L3**3 + b**2*(2*c4 - L3**3*r**2)) +
        b*L3**3*r*(3*L3**3*r**2 + 2*c4*(-2 + 2*p*r**2 + r**2*rho)) -
        a*(L3**6*r**2*(3 - b**2*r**2) + 2*b**2*c4**2*r**2*(p - rho) + c4*L3**3*(2 + p*r**2 - 3*r**2*rho + b**2*(2*r**2 + r**4*(-p + rho)))))
        *w**2 - 4*a**3*c4**2*L3**3*N**2*(14*a**3*c4*r**2 - 2*a**2*b*c4*r**3 - a*(3*L3**3*r**2 + c4*(24 + 7*p*r**2 - 7*r**2*rho)) +
        2*b*r*(9*L3**3*r**2 + c4*(-24 - 4*p*r**2 + 2*r**2*rho)))*w**4 +
        16*a**5*c4**3*(2*a*c4 + 4*b*c4*r + a*L3**3*r**2 - 2*b*L3**3*r**3)*w**6) +
        g**8*L3**3*(L3**6*N**6*r**2*(2*a*L3**3*r - 4*a**4*b*c4*r**2 + 2*a**2*b*(L3**3*r**2 + 2*c4*(1 + p*r**2 - r**2*rho)) +
        b*(L3**3*(-2 - p*r**2 + r**2*rho) + 2*c4*(-p + rho + 2*p*r**2*rho))) -
        2*a*L3**3*N**4*r**2*(-8*a**2*c4*L3**3*r + 8*a**5*b*c4**2*r**2 + L3**3*r*(L3**3 - 2*c4*rho) -
        4*a**3*b*c4*(L3**3*r**2 + c4*(2 + 3*p*r**2 - r**2*rho)) + 4*a*b*c4*(L3**3*(1 - r**2*rho) + c4*(3*p + p**2*r**2 + rho - p*r**2*rho)))
        *w**2 - 4*a**3*c4*N**2*(-10*a**2*c4*L3**3*r**3 + 6*a**3*b*c4*r**2*(2*c4 - L3**3*r**2) + 2*L3**3*r**3*(L3**3 - 2*c4*rho) -
        a*b*(2*c4 - L3**3*r**2)*(-(L3**3*r**2) + c4*(8 + 3*p*r**2 - 3*r**2*rho)))*w**4 +
        8*a**5*c4**2*r**3*(4*a**2*c4 - L3**3 + 2*c4*rho)*w**6) -
        192*b**5*c4**3*N**4*(a**2*c4*w**2 + 11*a*b*c4*r*w**2 + 2*b**2*(-(N**2*(c4 + L3**3*r**2)) + 3*c4*r**2*w**2)) -
        24*b**3*c4**2*g**2*N**2*(16*a**4*c4**2*w**4 + 8*a*b*c4*r*w**2*(-3*L3**3*N**2 + 2*a**2*c4*w**2) +
        2*a*b**3*c4*N**2*r*(-8*c4*w**2 + L3**3*r**2*(3*N**2 + 4*w**2)) +
        b**2*(9*L3**6*N**4*r**2 - 8*a**2*c4**2*w**2*(N**2 - 4*r**2*w**2) +
        c4*L3**3*N**2*(N**2*(8 - 10*a**2*r**2 + 13*p*r**2 + 3*r**2*rho) + 4*(-4 + 11*a**2)*r**2*w**2))))/(2.*r*(-48*b**4*c4**3*N**4*(b**2*N**2*(-2*c4 + L3**3*r**2) + 10*a**2*c4*w**2 - 4*a*b*c4*r*w**2) +
        g**6*(L3**3*N**2 + 2*a**2*c4*w**2)**2*(L3**3*N**2*(-2*a**2*c4 + L3**3 + 2*c4*p)*r**2 + 4*a**2*c4*(-2*c4 + L3**3*r**2)*w**2) +
        12*b**2*c4**2*g**2*N**2*(b**2*L3**3*N**4*(3*L3**3*r**2 + 2*c4*(-4 + a**2*r**2 - p*r**2)) +
        4*a*c4*N**2*(2*a*L3**3 - 4*b*L3**3*r + a*b**2*(-2*c4 + L3**3*r**2))*w**2 + 16*a**3*c4**2*(a - 2*b*r)*w**4) +
        8*c4*g**4*(L3**3*N**2 + 2*a**2*c4*w**2)*(b**2*L3**3*N**4*(-(L3**3*r**2) + c4*(3 - a**2*r**2 + p*r**2)) +
        a*c4*N**2*(6*b*L3**3*r + a*(L3**3 + b**2*(2*c4 - L3**3*r**2)))*w**2 + 2*a**3*c4**2*(a + 6*b*r)*w**4)))
    dp = -((dN*(p + rho))/N)
    da = b

    return [dN, dg, da, db, dp]


# cte

def ODE_eq(r, U, c):
    """
    N, g, a, b, p -> N, g, phi, phi', p, rho
    """

    w, c4, L3, rho_, p0 = c[0], c[1], c[2], c[3], c[4]
    N, g, a, b, p = U

    if (p > p0/1e06):  # p0/1e06  0
        rho = rho_
    else:
        rho = 0
        p = 0

    dN = (N*(6*b**2*c4*N**2+g**2*(N**2*(-L3**3+b**2*(-2*c4+L3**3*r**2)) +
          2*a*c4*(a+4*b*r)*w**2) + g**4*(L3**3*N**2*(1 - a**2*r**2 + p*r**2) +
          a**2*(-2*c4 + L3**3*r**2)*w**2)))/(2.*r*(-6*b**2*c4*N**2 +
          g**2*(L3**3*N**2 + 2*a**2*c4*w**2)))
    dg = (g**11*(L3**3*N**2 + 2*a**2*c4*w**2)**2*(L3**3*N**2*(-1 + a**2*r**2 + r**2*rho) + a**2*(-2*c4 + L3**3*r**2)*w**2)*
        (L3**3*N**2*(-2*a**2*c4 + L3**3 + 2*c4*p)*r**2 + 4*a**2*c4*(-2*c4 + L3**3*r**2)*w**2) +
        24*b**4*c4**3*g**3*N**4*(b**2*N**4*(31*L3**6*r**2 + 24*a*b*c4*L3**3*r**3 - 2*b**2*(-2*c4 + L3**3*r**2)**2 +
        2*c4*L3**3*(22 - 21*a**2*r**2 + 27*p*r**2 + 6*r**2*rho)) +
        4*c4*N**2*(-16*b**2*L3**3*r**2 - 2*a*b*r*(9*L3**3 + 5*b**2*(2*c4 - L3**3*r**2)) + a**2*(-7*L3**3 + b**2*(6*c4 + 37*L3**3*r**2)))*
        w**2 + 8*a**2*c4**2*(a**2 + 14*a*b*r + 16*b**2*r**2)*w**4) -
        4*b**2*c4**2*g**5*N**2*(b**2*L3**3*N**6*(27*L3**6*r**2 + 120*a*b*c4*L3**3*r**3 +
        2*c4*L3**3*(34 - 45*a**2*r**2 + 57*p*r**2 + 12*r**2*rho) -
        b**2*(2*c4 - L3**3*r**2)*(-5*L3**3*r**2 + c4*(-20 + 30*a**2*r**2 - 6*p*r**2 + 24*r**2*rho))) -
        2*c4*L3**3*N**4*(30*a**4*b**2*c4*r**2 + 16*b**2*L3**3*r**2 - 168*a**3*b**3*c4*r**3 +
        4*a*b*r*(-7*L3**3 + b**2*(-5*L3**3*r**2 + 2*c4*(11 + 12*p*r**2 + 6*r**2*rho))) +
        a**2*(2*L3**3 - b**2*(151*L3**3*r**2 + 2*c4*(-8 + 33*p*r**2 + 18*r**2*rho))))*w**2 +
        8*a**2*c4**2*N**2*(16*b**2*L3**3*r**2 + 6*a*b*r*(10*L3**3 + 7*b**2*(2*c4 - L3**3*r**2)) +
        a**2*(6*L3**3 + b**2*(22*c4 + 45*L3**3*r**2)))*w**4 - 16*a**4*c4**3*(a**2 - 14*a*b*r + 8*b**2*r**2)*w**6) +
        2*c4*g**7*(b**2*L3**6*N**8*(-(L3**6*r**2) + 56*a*b*c4*L3**3*r**3 + 2*c4*L3**3*(6 - 5*a**2*r**2 + 7*p*r**2 + 2*r**2*rho) +
        2*b**2*(-2*L3**6*r**4 + c4*L3**3*r**2*(-15 + 23*a**2*r**2 - 10*p*r**2 + 13*r**2*rho) +
        c4**2*(44 + 26*p*r**2 + 6*a**4*r**4 + a**2*(-58*r**2 - 6*r**4*(p - rho)) - 32*r**2*rho - 6*p*r**4*rho))) -
        2*a*c4*L3**3*N**6*(-80*a**2*b**3*c4*L3**3*r**3 + 6*a**3*b**2*c4*r**2*(2*L3**3 + 5*b**2*(2*c4 - L3**3*r**2)) -
        a*(2*L3**6 + 4*b**2*L3**3*(3*L3**3*r**2 + c4*(5 + 3*p*r**2)) +
        5*b**4*(2*c4 - L3**3*r**2)*(L3**3*r**2 + 2*c4*(2 + p*r**2 - 2*r**2*rho))) +
        4*b*L3**3*r*(-3*L3**3 + b**2*(3*L3**3*r**2 + 2*c4*(-7 + 4*p*r**2 + 8*r**2*rho))))*w**2 +
        4*a**3*c4**2*N**4*(6*a*L3**6 + 36*b*L3**6*r - 34*a**3*b**2*c4*L3**3*r**2 - 40*a**2*b**3*c4*L3**3*r**3 +
        4*a*b**4*(-2*c4 + L3**3*r**2)**2 + 8*b**3*L3**3*r*(-9*L3**3*r**2 + c4*(30 + 4*p*r**2 - 8*r**2*rho)) +
        a*b**2*L3**3*(15*L3**3*r**2 + c4*(68 + 30*p*r**2 - 4*r**2*rho)))*w**4 -
        16*a**5*c4**3*N**2*(-3*a*L3**3 - 18*b*L3**3*r + a*b**2*(2*c4 - 9*L3**3*r**2) + 14*b**3*r*(-2*c4 + L3**3*r**2))*w**6 +
        32*a**7*c4**4*(a + 6*b*r)*w**8) + g**9*(L3**9*N**8*
        (L3**3*(-2*a**2*c4 + L3**3 + 2*c4*p)*r**2 - 8*a*b*c4*L3**3*r**3 +
        b**2*(L3**6*r**4 - 2*c4*L3**3*r**2*(-7 + 9*a**2*r**2 - 3*p*r**2 + 6*r**2*rho) +
        4*c4**2*(-6 + 2*a**4*r**4 + a**2*(5*r**2 - 2*r**4*(p - rho)) + 4*r**2*rho - p*(r**2 + 2*r**4*rho)))) +
        2*a*c4*L3**6*N**6*(-8*a**2*b*c4*L3**3*r**3 + 24*a**5*b**2*c4**2*r**4 + 4*b*L3**3*r*(L3**3*r**2 + c4*(-6 + 4*r**2*rho)) -
        2*a**3*c4*r**2*(L3**3 + 2*b**2*(9*L3**3*r**2 + 2*c4*(-3 + 5*p*r**2 - r**2*rho))) +
        a*(5*L3**6*r**2 + c4*L3**3*(-8 + 6*p*r**2 + 4*r**2*rho) +
        4*b**2*c4*(L3**3*r**2*(9 + 2*p*r**2 - 7*r**2*rho) + 2*c4*(-6 + 3*p*r**2 + 2*p**2*r**4 + 6*r**2*rho - p*r**4*rho))))*w**2 +
        4*a**3*c4**2*L3**3*N**4*(8*a**2*b*c4*L3**3*r**3 + 2*a**3*c4*r**2*(L3**3 + 17*b**2*(2*c4 - L3**3*r**2)) +
        4*b*L3**3*r*(5*L3**3*r**2 + 2*c4*(-9 + 4*r**2*rho)) +
        a*(11*L3**6*r**2 + c4*L3**3*(-24 + 6*p*r**2 + 8*r**2*rho) -
        b**2*(2*c4 - L3**3*r**2)*(-5*L3**3*r**2 + 2*c4*(22 + 9*p*r**2 - 8*r**2*rho))))*w**4 +
        8*a**5*c4**3*L3**3*N**2*(2*a**3*c4*r**2 + 11*a*L3**3*r**2 + 8*a**2*b*c4*r**3 + 28*b*L3**3*r**3 + 8*b*c4*r*(-9 + 2*r**2*rho) +
        2*a*c4*(-12 + p*r**2 + 2*r**2*rho))*w**6 - 64*a**7*c4**4*(a + 3*b*r)*(2*c4 - L3**3*r**2)*w**8) +
        288*b**6*c4**4*g*N**6*(6*a**2*c4*w**2 + 28*a*b*c4*r*w**2 + b**2*(-(N**2*(6*c4 + 5*L3**3*r**2)) + 16*c4*r**2*w**2)))/(2.*r*(-6*b**2*c4*N**2
        + g**2*(L3**3*N**2 + 2*a**2*c4*w**2))*(-48*b**4*c4**3*N**4*(b**2*N**2*(-2*c4 + L3**3*r**2) + 10*a**2*c4*w**2 - 4*a*b*c4*r*w**2) +
        g**6*(L3**3*N**2 + 2*a**2*c4*w**2)**2*(L3**3*N**2*(-2*a**2*c4 + L3**3 + 2*c4*p)*r**2 + 4*a**2*c4*(-2*c4 + L3**3*r**2)*w**2) +
        12*b**2*c4**2*g**2*N**2*(b**2*L3**3*N**4*(3*L3**3*r**2 + 2*c4*(-4 + a**2*r**2 - p*r**2)) +
        4*a*c4*N**2*(2*a*L3**3 - 4*b*L3**3*r + a*b**2*(-2*c4 + L3**3*r**2))*w**2 + 16*a**3*c4**2*(a - 2*b*r)*w**4) +
        8*c4*g**4*(L3**3*N**2 + 2*a**2*c4*w**2)*(b**2*L3**3*N**4*(-(L3**3*r**2) + c4*(3 - a**2*r**2 + p*r**2)) +
        a*c4*N**2*(6*b*L3**3*r + a*(L3**3 + b**2*(2*c4 - L3**3*r**2)))*w**2 + 2*a**3*c4**2*(a + 6*b*r)*w**4)))
    db = (4*b*c4*g**4*(b**2*L3**3*N**6*(30*a*b*c4*L3**3*r**3 -
        b**2*(2*c4 - L3**3*r**2)*(L3**3*r**2 + c4*(-8 + 6*a**2*r**2 - 3*p*r**2 + 3*r**2*rho)) +
        2*L3**3*(5*L3**3*r**2 + c4*(4 - 10*a**2*r**2 + 13*p*r**2 + 3*r**2*rho))) -
        2*c4*L3**3*N**4*(20*a**4*b**2*c4*r**2 + 4*b**2*L3**3*r**2 - 48*a**3*b**3*c4*r**3 -
        2*a**2*(L3**3 + b**2*(23*L3**3*r**2 + c4*(-4 + 7*p*r**2 - 3*r**2*rho))) +
        a*b*r*(2*L3**3 + b**2*(L3**3*r**2 + 2*c4*(8 + 12*p*r**2 + 3*r**2*rho))))*w**2 +
        16*a**2*c4**2*N**2*(2*b**2*L3**3*r**2 + 3*a*b*r*(L3**3 + b**2*(4*c4 - 2*L3**3*r**2)) + a**2*(2*L3**3 + b**2*(4*c4 + 5*L3**3*r**2)))*
        w**4 + 16*a**4*c4**3*(a**2 - a*b*r - 2*b**2*r**2)*w**6) -
        2*b*g**6*(L3**6*N**6*(14*a*b*c4*L3**3*r**3 + L3**3*r**2*(-2*a**2*c4 + L3**3 + 3*c4*p + c4*rho) -
        2*b**2*c4*(2*c4 - L3**3*r**2)*(-4 + 4*a**2*r**2 - 3*p*r**2 + r**2*rho)) -
        4*a*c4*L3**3*N**4*(-16*a**2*b*c4*L3**3*r**3 + 2*a**3*c4*r**2*(2*L3**3 + b**2*(2*c4 - L3**3*r**2)) +
        b*L3**3*r*(3*L3**3*r**2 + 2*c4*(-2 + 2*p*r**2 + r**2*rho)) -
        a*(L3**6*r**2*(3 - b**2*r**2) + 2*b**2*c4**2*r**2*(p - rho) + c4*L3**3*(2 + p*r**2 - 3*r**2*rho + b**2*(2*r**2 + r**4*(-p + rho)))))
        *w**2 - 4*a**3*c4**2*L3**3*N**2*(14*a**3*c4*r**2 - 2*a**2*b*c4*r**3 - a*(3*L3**3*r**2 + c4*(24 + 7*p*r**2 - 7*r**2*rho)) +
        2*b*r*(9*L3**3*r**2 + c4*(-24 - 4*p*r**2 + 2*r**2*rho)))*w**4 +
        16*a**5*c4**3*(2*a*c4 + 4*b*c4*r + a*L3**3*r**2 - 2*b*L3**3*r**3)*w**6) +
        g**8*L3**3*(L3**6*N**6*r**2*(2*a*L3**3*r - 4*a**4*b*c4*r**2 + 2*a**2*b*(L3**3*r**2 + 2*c4*(1 + p*r**2 - r**2*rho)) +
        b*(L3**3*(-2 - p*r**2 + r**2*rho) + 2*c4*(-p + rho + 2*p*r**2*rho))) -
        2*a*L3**3*N**4*r**2*(-8*a**2*c4*L3**3*r + 8*a**5*b*c4**2*r**2 + L3**3*r*(L3**3 - 2*c4*rho) -
        4*a**3*b*c4*(L3**3*r**2 + c4*(2 + 3*p*r**2 - r**2*rho)) + 4*a*b*c4*(L3**3*(1 - r**2*rho) + c4*(3*p + p**2*r**2 + rho - p*r**2*rho)))
        *w**2 - 4*a**3*c4*N**2*(-10*a**2*c4*L3**3*r**3 + 6*a**3*b*c4*r**2*(2*c4 - L3**3*r**2) + 2*L3**3*r**3*(L3**3 - 2*c4*rho) -
        a*b*(2*c4 - L3**3*r**2)*(-(L3**3*r**2) + c4*(8 + 3*p*r**2 - 3*r**2*rho)))*w**4 +
        8*a**5*c4**2*r**3*(4*a**2*c4 - L3**3 + 2*c4*rho)*w**6) -
        192*b**5*c4**3*N**4*(a**2*c4*w**2 + 11*a*b*c4*r*w**2 + 2*b**2*(-(N**2*(c4 + L3**3*r**2)) + 3*c4*r**2*w**2)) -
        24*b**3*c4**2*g**2*N**2*(16*a**4*c4**2*w**4 + 8*a*b*c4*r*w**2*(-3*L3**3*N**2 + 2*a**2*c4*w**2) +
        2*a*b**3*c4*N**2*r*(-8*c4*w**2 + L3**3*r**2*(3*N**2 + 4*w**2)) +
        b**2*(9*L3**6*N**4*r**2 - 8*a**2*c4**2*w**2*(N**2 - 4*r**2*w**2) +
        c4*L3**3*N**2*(N**2*(8 - 10*a**2*r**2 + 13*p*r**2 + 3*r**2*rho) + 4*(-4 + 11*a**2)*r**2*w**2))))/(2.*r*(-48*b**4*c4**3*N**4*(b**2*N**2*(-2*c4 + L3**3*r**2) + 10*a**2*c4*w**2 - 4*a*b*c4*r*w**2) +
        g**6*(L3**3*N**2 + 2*a**2*c4*w**2)**2*(L3**3*N**2*(-2*a**2*c4 + L3**3 + 2*c4*p)*r**2 + 4*a**2*c4*(-2*c4 + L3**3*r**2)*w**2) +
        12*b**2*c4**2*g**2*N**2*(b**2*L3**3*N**4*(3*L3**3*r**2 + 2*c4*(-4 + a**2*r**2 - p*r**2)) +
        4*a*c4*N**2*(2*a*L3**3 - 4*b*L3**3*r + a*b**2*(-2*c4 + L3**3*r**2))*w**2 + 16*a**3*c4**2*(a - 2*b*r)*w**4) +
        8*c4*g**4*(L3**3*N**2 + 2*a**2*c4*w**2)*(b**2*L3**3*N**4*(-(L3**3*r**2) + c4*(3 - a**2*r**2 + p*r**2)) +
        a*c4*N**2*(6*b*L3**3*r + a*(L3**3 + b**2*(2*c4 - L3**3*r**2)))*w**2 + 2*a**3*c4**2*(a + 6*b*r)*w**4)))
    dp = -((dN*(p + rho))/N)
    da = b

    return [dN, dg, da, db, dp]
